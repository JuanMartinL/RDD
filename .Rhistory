# Test and train sets
test_set <- cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,])
# Test and train sets
test_set <- cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,])
train_x <- cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,])
train_set <- cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,])
#------------------------------------
# Q2: Next we will use the same gene expression example used in the Comprehension Check: Distance exercises.
#------------------------------------
rm(list=ls())
library(dslabs)
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,])
train_set <- cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,])
# Getting accuracy
ks <- seq(1, 11, 2)
View(test_index)
View(test_set)
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- sapply(ks, function(k){
fit <- knn3(V1 ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$V1)
})
colnames(test_set[1])
?colnames
`colnames<-`(test_set[1])
?`colnames<-`
colnames[1]
View(y)
View(tissue_gene_expression)
colnames(test_set)[1] <- "tissue"
View(test_set)
#------------------------------------
# Q2: Next we will use the same gene expression example used in the Comprehension Check: Distance exercises.
#------------------------------------
rm(list=ls())
library(dslabs)
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,])
train_set <- cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,])
colnames(test_set)[1] <- "tissue"
colnames(train_set)[1] <- "tissue"
View(train_set)
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- sapply(ks, function(k){
fit <- knn3(tissue ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$tissue)
})
train_set
View(x)
# Test and train sets
test_set <- cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,])
train_set <- cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,])
train_set
View(train_set)
colnames(test_set)[1] <- "tissue"
colnames(train_set)[1] <- "tissue"
View(train_set)
View(test_set)
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- sapply(ks, function(k){
fit <- knn3(tissue ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$tissue)
})
fit <- knn3(tissue ~ ., data = train_set, k = 1)
fit <- knn3(train_set$tissue ~ ., data = train_set, k = 1)
# Test and train sets
test_set <- as.data.frame(cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,]))
train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
colnames(test_set)[1] <- "tissue"
colnames(train_set)[1] <- "tissue"
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- sapply(ks, function(k){
fit <- knn3(tissue ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$tissue)
})
View(test_set)
fit <- knn3(tissue ~ ., data = train_set, k = k)
fit <- knn3(train_set$tissue ~ ., data = train_set, k = k)
fit <- knn3(train_set$tissue ~ ., data = train_set, k = 1
View(train_set)
fit <- knn3(train_set$tissue ~ ., data = train_set, k = 1)
fit <- knn3(train_set[1] ~ ., data = train_set, k = 1)
train_set[1]
train_set[1] ~ .
fit <- knn3(train_set[1] ~ ., data = train_set, k = 1)
colnames(test_set)[1] <- "y"
colnames(train_set)[1] <- "y"
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- sapply(ks, function(k){
fit <- knn3(tissue ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$tissue)
})
acc <- sapply(ks, function(k){
fit <- knn3(y ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$tissue)
})
fit <- knn3(y ~ ., data = train_set, k = 1)
View(train_set)
fit <- knn3(train_set$y ~ ., data = train_set, k = 1)
fit <- knn3(train_set$y~., data = train_set, k = 1)
fit <- knn3(y ~ ., data = train_set, k = k)
fit <- knn3(y ~ ., data = train_set, k = 1)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- as.data.frame(cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,]))
train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
colnames(test_set)[1] <- "y"
colnames(train_set)[1] <- "y"
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(sex ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$sex)
})
acc <- map_dbl(ks, function(k){
fit <- knn3(y ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$sex)
})
library(caret)
library(dslabs)
library(dplyr)
library(purrr)
rm(list=ls())
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(y ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$sex)
})
library(dslabs)
data("tissue_gene_expression")
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- as.data.frame(cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,]))
train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
colnames(test_set)[1] <- "y"
colnames(train_set)[1] <- "y"
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(y ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$sex)
})
knn3
train_set
View(train_set)
test_set$y %>% factor(levels = levels(tissue_gene_expression$y))
View(test_set)
levels(tissue_gene_expression$y)
test_set$y = factor(levels = levels(tissue_gene_expression$y))
test_set$y
factor(levels = levels(tissue_gene_expression$y)
factor(levels = levels(tissue_gene_expression$y))
test_set$y = factor(test_set$y, levels = levels(tissue_gene_expression$y))
test_set$y
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- as.data.frame(cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,]))
train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
colnames(test_set)[1] <- "y"
colnames(train_set)[1] <- "y"
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(y ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$sex)
})
#------------------------------------
# Q2: Next we will use the same gene expression example used in the Comprehension Check: Distance exercises.
#------------------------------------
rm(list=ls())
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- as.data.frame(cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,]))
train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
colnames(test_set)[1] <- "y"
colnames(train_set)[1] <- "y"
lm(y~., data=train_set)
reg = lm(y~., data=train_set)
summary(reg)
#------------------------------------
# Q2: Next we will use the same gene expression example used in the Comprehension Check: Distance exercises.
#------------------------------------
rm(list=ls())
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- as.data.frame(cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,]))
train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
colnames(test_set)[1] <- "y"
colnames(train_set)[1] <- "y"
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(y ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$sex)
})
library(caret)
#------------------------------------
# Q2: Next we will use the same gene expression example used in the Comprehension Check: Distance exercises.
#------------------------------------
rm(list=ls())
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
data("tissue_gene_expression")
library(caret)
library(dslabs)
library(dplyr)
library(purrr)
rm(list=ls())
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- as.data.frame(cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,]))
train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
colnames(test_set)[1] <- "y"
colnames(train_set)[1] <- "y"
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(y ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$sex)
})
fit <- knn3(y ~ ., data = train_set, k = 1)
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
#------------------------------------
# Q2: Next we will use the same gene expression example used in the Comprehension Check: Distance exercises.
#------------------------------------
rm(list=ls())
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- as.data.frame(cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,]))
train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
# Getting accuracy
ks <- seq(1, 11, 2)
View(test_set)
fit <- knn3(V1 ~ ., data = train_set, k = k)
fit <- knn3(V1 ~ ., data = train_set, k = 1)
train_set
# Setting x and y
dat <- cbind(tissue_gene_expression$y, tissue_gene_expression$x)
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- dat[test_index,]
train_set <- dat[-test_index,]
# Getting accuracy
ks <- seq(1, 11, 2)
View(test_set)
acc <- map_dbl(ks, function(k){
fit <- knn3(V1 ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$sex)
})
# Setting x and y
dat <- cbind(tissue_gene_expression$y, tissue_gene_expression$x)
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set_x <- x[test_index,]
# Test and train sets
test_x <- x[test_index,]
test_y <- y[test_index,]
train_x <- x[-test_index,]
train_y <- y[-test_index,]
train_y
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(train_x, train_y, k = k)
y_hat <- predict(fit, test_x, type = "class")
mean(test_y[test_y == y_hat])
})
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(train_x, train_y, k = k)
y_hat <- predict(fit, test_x, type = "class")
})
fit <- knn3(train_x, train_y, k = k)
fit <- knn3(train_x, train_y, k = 1)
y_hat <- predict(fit, test_x, type = "class")
y_hat
train_y <- y[-test_index,]
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(train_x, train_y, k = k)
y_hat <- predict(fit, test_x, type = "class")
})
fit <- knn3(train_x, train_y, k = 1)
y_hat <- predict(fit, test_x, type = "class")
fit <- knn3(train_x, train_y, k = 1)
y_hat <- predict(fit, as.data.frame(test_x), type = "class")
y_hat
mean(y_hat == test_y)
fit <- knn3(train_x, train_y, k = 1)
y_hat <- predict(fit, as.data.frame(test_x), type = "class")
mean(y_hat == test_y)
fit <- knn3(as.data.frame(train_x), train_y, k = 1)
y_hat <- predict(fit, as.data.frame(test_x), type = "class")
mean(y_hat == test_y)
fit <- knn3(as.data.frame(train_x), as.data.frame(train_y), k = 1)
fit <- knn3(as.data.frame(train_x), train_y, k = 1)
y_hat <- predict(fit, as.data.frame(test_x), type = "class")
mean(y_hat == test_y)
y_hat == test_y
res <- as.data.frame(cbind(y_hat, test_y))
View(res)
fit <- knn3(as.data.frame(train_x), train_y, k = 1)
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(train_x, train_y, k = k)
y_hat <- predict(fit, test_x, type = "class")
})
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(train_x, train_y, k = k)
y_hat <- predict(fit, test_x, type = "class")
mean(y_hat == test_y)
})
plot(ks, acc)
max(acc)
ks[which.max(acc)]
acc
cbind(ks, acc)
#------------------------------------
# Q2: Next we will use the same gene expression example used in the Comprehension Check: Distance exercises.
#------------------------------------
rm(list=ls())
data("tissue_gene_expression")
# Setting x and y
dat <- cbind(tissue_gene_expression$y, tissue_gene_expression$x)
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_x <- x[test_index,]
test_y <- y[test_index,]
train_x <- x[-test_index,]
train_y <- y[-test_index,]
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(train_x, train_y, k = k)
y_hat <- predict(fit, test_x, type = "class")
mean(y_hat == test_y)
})
cbind(ks, acc)
plot(ks, acc)
max(acc)
ks[which.max(acc)]
cbind(ks, acc)
install.packages("tinytex")
tinytex::install_tinytex()
install_tinytex()
library("tinytex")
install_tinytex()
tinytex:::is_tinytex()
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
library(stargazer);
install.packages("estimatr")
library(tidyverse)
library(haven)
library(estimatr)
read_data <- function(df)
{
full_path <- paste("https://raw.github.com/scunning1975/mixtape/master/",
df, sep = "")
df <- read_dta(full_path)
return(df)
}
lmb_data <- read_data("lmb-data.dta")
rm(list=ls())
rm(list=ls())
rm(list=ls())
setwd("D:/Desktop/Universidad/15° Semestre/Causal Inference and Research Design/Assigments/Assignment 4/RDD")  # Setting the directory
library(stargazer);library(readxl);library(tidyverse);library(ggplot2)
library(rddensity) # McCray test
library(rdd)
library(estimatr) # Robust LM
library(stats)
library(rdrobust)
BDD <- read.csv("Data/Input/hansen_dwi.csv",
sep = ",", stringsAsFactors = F)
BDD$dbac1 <- ifelse(BDD$bac1 >= 0.08, 1, 0)
# Looking some descriptive statistics
summary(BDD$bac1)
# McCray Sorting Test
#-----------------------------------
DCdensity(BDD$bac1, cutpoint = 0.08, htest = T)
# Local Polynomial Density Estimation
#-----------------------------------
density <- rddensity(BDD$bac1, c = 0.08)
density$test$p_jk
rdplotdensity(density, BDD$bac1)
## Placebo test
i = 1
## Placebo test
i = 1
for (placebo in seq(0.04, 0.1, 0.01)) {
print(paste(i, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"), quote = F)
print(rddensity(BDD$bac1, c = placebo, all = T)$test$p_jk)
i = i + 1
}
## Placebo test
i = 1
for (placebo in seq(0.04, 0.1, 0.01)) {
print(paste(i,  placebo, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"), quote = F)
print(rddensity(BDD$bac1, c = placebo, all = T)$test$p_jk)
i = i + 1
}
## Placebo test
i = 1
for (placebo in seq(0.04, 0.1, 0.01)) {
print(paste(placebo, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"), quote = F)
print(rddensity(BDD$bac1, c = placebo, all = T)$test$p_jk)
i = i + 1
}
# Looking at the histogram, searching for manipulating evidence
ggplot(data = BDD[(BDD$bac1 > 0.06 & BDD$bac1 < 0.09),]) +
geom_histogram(aes(bac1), binwidth = 0.001) +
geom_vline(xintercept = 0.08, linetype = "dashed", color = "red")
