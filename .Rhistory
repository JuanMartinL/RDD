train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
colnames(test_set)[1] <- "y"
colnames(train_set)[1] <- "y"
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(y ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$sex)
})
#------------------------------------
# Q2: Next we will use the same gene expression example used in the Comprehension Check: Distance exercises.
#------------------------------------
rm(list=ls())
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- as.data.frame(cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,]))
train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
colnames(test_set)[1] <- "y"
colnames(train_set)[1] <- "y"
lm(y~., data=train_set)
reg = lm(y~., data=train_set)
summary(reg)
#------------------------------------
# Q2: Next we will use the same gene expression example used in the Comprehension Check: Distance exercises.
#------------------------------------
rm(list=ls())
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- as.data.frame(cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,]))
train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
colnames(test_set)[1] <- "y"
colnames(train_set)[1] <- "y"
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(y ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$sex)
})
library(caret)
#------------------------------------
# Q2: Next we will use the same gene expression example used in the Comprehension Check: Distance exercises.
#------------------------------------
rm(list=ls())
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
data("tissue_gene_expression")
library(caret)
library(dslabs)
library(dplyr)
library(purrr)
rm(list=ls())
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- as.data.frame(cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,]))
train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
colnames(test_set)[1] <- "y"
colnames(train_set)[1] <- "y"
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(y ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$sex)
})
fit <- knn3(y ~ ., data = train_set, k = 1)
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
#------------------------------------
# Q2: Next we will use the same gene expression example used in the Comprehension Check: Distance exercises.
#------------------------------------
rm(list=ls())
data("tissue_gene_expression")
# Setting x and y
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- as.data.frame(cbind(tissue_gene_expression$y[test_index], tissue_gene_expression$x[test_index,]))
train_set <- as.data.frame(cbind(tissue_gene_expression$y[-test_index], tissue_gene_expression$x[-test_index,]))
# Getting accuracy
ks <- seq(1, 11, 2)
View(test_set)
fit <- knn3(V1 ~ ., data = train_set, k = k)
fit <- knn3(V1 ~ ., data = train_set, k = 1)
train_set
# Setting x and y
dat <- cbind(tissue_gene_expression$y, tissue_gene_expression$x)
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set <- dat[test_index,]
train_set <- dat[-test_index,]
# Getting accuracy
ks <- seq(1, 11, 2)
View(test_set)
acc <- map_dbl(ks, function(k){
fit <- knn3(V1 ~ ., data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class")
F_meas(data = y_hat, reference = test_set$sex)
})
# Setting x and y
dat <- cbind(tissue_gene_expression$y, tissue_gene_expression$x)
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_set_x <- x[test_index,]
# Test and train sets
test_x <- x[test_index,]
test_y <- y[test_index,]
train_x <- x[-test_index,]
train_y <- y[-test_index,]
train_y
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(train_x, train_y, k = k)
y_hat <- predict(fit, test_x, type = "class")
mean(test_y[test_y == y_hat])
})
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(train_x, train_y, k = k)
y_hat <- predict(fit, test_x, type = "class")
})
fit <- knn3(train_x, train_y, k = k)
fit <- knn3(train_x, train_y, k = 1)
y_hat <- predict(fit, test_x, type = "class")
y_hat
train_y <- y[-test_index,]
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(train_x, train_y, k = k)
y_hat <- predict(fit, test_x, type = "class")
})
fit <- knn3(train_x, train_y, k = 1)
y_hat <- predict(fit, test_x, type = "class")
fit <- knn3(train_x, train_y, k = 1)
y_hat <- predict(fit, as.data.frame(test_x), type = "class")
y_hat
mean(y_hat == test_y)
fit <- knn3(train_x, train_y, k = 1)
y_hat <- predict(fit, as.data.frame(test_x), type = "class")
mean(y_hat == test_y)
fit <- knn3(as.data.frame(train_x), train_y, k = 1)
y_hat <- predict(fit, as.data.frame(test_x), type = "class")
mean(y_hat == test_y)
fit <- knn3(as.data.frame(train_x), as.data.frame(train_y), k = 1)
fit <- knn3(as.data.frame(train_x), train_y, k = 1)
y_hat <- predict(fit, as.data.frame(test_x), type = "class")
mean(y_hat == test_y)
y_hat == test_y
res <- as.data.frame(cbind(y_hat, test_y))
View(res)
fit <- knn3(as.data.frame(train_x), train_y, k = 1)
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(train_x, train_y, k = k)
y_hat <- predict(fit, test_x, type = "class")
})
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(train_x, train_y, k = k)
y_hat <- predict(fit, test_x, type = "class")
mean(y_hat == test_y)
})
plot(ks, acc)
max(acc)
ks[which.max(acc)]
acc
cbind(ks, acc)
#------------------------------------
# Q2: Next we will use the same gene expression example used in the Comprehension Check: Distance exercises.
#------------------------------------
rm(list=ls())
data("tissue_gene_expression")
# Setting x and y
dat <- cbind(tissue_gene_expression$y, tissue_gene_expression$x)
x <- as.data.frame(tissue_gene_expression$x)
y <- as.data.frame(tissue_gene_expression$y)
# Partitioning the data
set.seed(1, sample.kind = "Rounding")
test_index <- createDataPartition(tissue_gene_expression$y, times = 1, p = 0.5, list = F)
# Test and train sets
test_x <- x[test_index,]
test_y <- y[test_index,]
train_x <- x[-test_index,]
train_y <- y[-test_index,]
# Getting accuracy
ks <- seq(1, 11, 2)
acc <- map_dbl(ks, function(k){
fit <- knn3(train_x, train_y, k = k)
y_hat <- predict(fit, test_x, type = "class")
mean(y_hat == test_y)
})
cbind(ks, acc)
plot(ks, acc)
max(acc)
ks[which.max(acc)]
cbind(ks, acc)
install.packages("tinytex")
tinytex::install_tinytex()
install_tinytex()
library("tinytex")
install_tinytex()
tinytex:::is_tinytex()
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
library(stargazer);
install.packages("estimatr")
library(tidyverse)
library(haven)
library(estimatr)
read_data <- function(df)
{
full_path <- paste("https://raw.github.com/scunning1975/mixtape/master/",
df, sep = "")
df <- read_dta(full_path)
return(df)
}
lmb_data <- read_data("lmb-data.dta")
rm(list=ls())
rm(list=ls())
# Cleaning
rm(list=ls())
library(tidyverse)
library(haven)
library(estimatr)
# Load the raw data into memory
read_data <- function(df)
{
full_path <- paste("https://raw.github.com/scunning1975/mixtape/master/",
df, sep = "")
df <- read_dta(full_path)
return(df)
}
lmb_data <- read_data("lmb-data.dta")
lmb_subset <- lmb_data %>%
filter(lagdemvoteshare>.48 & lagdemvoteshare<.52)
lm_1 <- lm_robust(score ~ lagdemocrat, data = lmb_subset, clusters = id)
lm_2 <- lm_robust(score ~ democrat, data = lmb_subset, clusters = id)
lm_3 <- lm_robust(democrat ~ lagdemocrat, data = lmb_subset, clusters = id)
summary(lm_1)
summary(lm_2)
summary(lm_3)
lm_1 <- lm_robust(score ~ lagdemocrat, data = lmb_data, clusters = id)
View(lmb_subset)
#aggregating the data
categories <- lmb_data$lagdemvoteshare
lmb_data$lagdemvoteshare
cut(lmb_data$lagdemvoteshare, 100)
?split
demmeans <- split(lmb_data$score, cut(lmb_data$lagdemvoteshare, 100)) %>%
lapply(mean)
View(demmeans)
demmeans <- split(lmb_data$score, cut(lmb_data$lagdemvoteshare, 100)) %>%
lapply(mean) %>%
unlist()
agg_lmb_data <- data.frame(score = demmeans, lagdemvoteshare = seq(0.01,1, by = 0.01))
#plotting
lmb_data <- lmb_data %>%
mutate(gg_group = case_when(lagdemvoteshare > 0.5 ~ 1, TRUE ~ 0))
ggplot(lmb_data, aes(lagdemvoteshare, score)) +
geom_point(aes(x = lagdemvoteshare, y = score), data = agg_lmb_data) +
stat_smooth(aes(lagdemvoteshare, score, group = gg_group), method = "lm",
formula = y ~ x + I(x^2)) +
xlim(0,1) + ylim(0,100) +
geom_vline(xintercept = 0.5)
ggplot(lmb_data, aes(lagdemvoteshare, score)) +
geom_point(aes(x = lagdemvoteshare, y = score), data = agg_lmb_data) +
stat_smooth(aes(lagdemvoteshare, score, group = gg_group), method = "loess") +
xlim(0,1) + ylim(0,100) +
geom_vline(xintercept = 0.5)
ggplot(lmb_data, aes(lagdemvoteshare, score)) +
geom_point(aes(x = lagdemvoteshare, y = score), data = agg_lmb_data) +
stat_smooth(aes(lagdemvoteshare, score, group = gg_group), method = "lm") +
xlim(0,1) + ylim(0,100) +
geom_vline(xintercept = 0.5)
demmeans <- split(lmb_data$score, cut(lmb_data$lagdemvoteshare, 100))
View(demmeans)
lmb_data$score
demmeans <- split(lmb_data$score, cut(lmb_data$lagdemvoteshare, 100))
demmeans
cut(lmb_data$lagdemvoteshare, 100)
lmb_data <- lmb_data %>%
mutate(gg_group = case_when(lagdemvoteshare > 0.5 ~ 1, TRUE ~ 0))
View(lmb_data)
# Aggregating the data
categories <- lmb_data$bac1
# Aggregating the data
categories <- BDD$bac1
rm(list=ls())
setwd("D:/Desktop/Universidad/15° Semestre/Causal Inference and Research Design/Assigments/Assignment 4/RDD")  # Setting the directory
library(stargazer);library(readxl);library(tidyverse);library(ggplot2)
library(rddensity) # McCray test
library(rdd)
library(estimatr) # Robust LM
library(stats)
library(rdrobust)
BDD <- read.csv("Data/Input/hansen_dwi.csv",
sep = ",", stringsAsFactors = F)
BDD$dbac1 <- ifelse(BDD$bac1 >= 0.08, 1, 0)
# Looking some descriptive statistics
summary(BDD$bac1)
# McCray Sorting Test
#-----------------------------------
DCdensity(BDD$bac1, cutpoint = 0.08, htest = T)
# Aggregating the data
categories <- BDD$bac1
View(BDD)
demmeans <- split(BDD$recidivism, cut(BDD$bac1, 100)) %>%
lapply(mean) %>%
unlist()
agg_lmb_data <- data.frame(score = demmeans, BDD$bac1 = seq(0.01,1, by = 0.01))
agg_lmb_data <- data.frame(recidivism = demmeans, bac1 = seq(0.01,1, by = 0.01))
View(agg_lmb_data)
# Plotting
BDD <- BDD %>%
mutate(gg_group = case_when(bac1 > 0.08, TRUE ~ 0))
# Plotting
BDD <- BDD %>%
mutate(gg_group = case_when(bac1 > 0.08 ~ 1, TRUE ~ 0))
# Plotting
BDD <- BDD %>%
mutate(gg_group = case_when(bac1 > 0.08, TRUE ~ 0))
View(BDD)
mean(BDD$gg_group)
mean(BDD$bac1)
summary(BDD$bac1)
# Plotting
BDD <- BDD %>%
mutate(gg_group = case_when(bac1 > 0.08 ~ 0.449, TRUE ~ 0))
summary(BDD$bac1)
summary(BDD$gg_group)
?case_when
# Plotting
BDD <- BDD %>%
mutate(gg_group = case_when(bac1 > 0.08 ~ 1, TRUE ~ 0))
dbac1 == gg_group
BDD$dbac1 == BDD$gg_group
summary(BDD$dbac1 == BDD$gg_group)
agg_BDD <- data.frame(recidivism = demmeans, bac1 = seq(0.01,1, by = 0.01))
# Plotting
BDD <- BDD %>%
mutate(gg_group = case_when(bac1 > 0.08 ~ 1, TRUE ~ 0))
ggplot(BDD, aes(bac1, recidivism)) +
geom_point(aes(x = bac1, y = recividism), data = agg_BDD) +
stat_smooth(aes(bac1, recividism, group = dbac1), method = "lm",
formula = y ~ x + I(x^2)) +
geom_vline(xintercept = 0.08)
ggplot(BDD, aes(bac1, recidivism)) +
geom_point(aes(x = bac1, y = recidivism), data = agg_BDD) +
stat_smooth(aes(bac1, recividism, group = dbac1), method = "lm",
formula = y ~ x + I(x^2)) +
geom_vline(xintercept = 0.08)
agg_BDD <- data.frame(recidivism = demmeans, bac1 = seq(0.01,1, by = 0.01))
ggplot(BDD, aes(bac1, recidivism)) +
geom_point(aes(x = bac1, y = recidivism), data = add_BDD) +
stat_smooth(aes(bac1, recidivism, group = gg_group), method = "lm") +
geom_vline(xintercept = 0.08)
agg_BDD <- data.frame(recidivism = demmeans, bac1 = seq(0.01,1, by = 0.01))
# Plotting
BDD <- BDD %>%
mutate(gg_group = case_when(bac1 > 0.08 ~ 1, TRUE ~ 0))
ggplot(BDD, aes(bac1, recidivism)) +
geom_point(aes(x = bac1, y = recidivism), data = add_BDD) +
stat_smooth(aes(bac1, recidivism, group = gg_group), method = "lm") +
geom_vline(xintercept = 0.08)
ggplot(BDD, aes(bac1, recidivism)) +
geom_point(aes(x = bac1, y = recidivism), data = agg_BDD) +
stat_smooth(aes(bac1, recidivism, group = gg_group), method = "lm") +
geom_vline(xintercept = 0.08)
ggplot(BDD, aes(bac1, recidivism)) +
geom_point(aes(x = bac1, y = recidivism), data = agg_BDD) +
stat_smooth(aes(bac1, recidivism, group = gg_group), method = "lm") +
geom_vline(xintercept = 0.08) +
xlim(0,0.2)
ggplot(BDD, aes(bac1, recidivism)) +
geom_point(aes(x = bac1, y = recidivism), data = BDD) +
stat_smooth(aes(bac1, recidivism, group = gg_group), method = "lm") +
geom_vline(xintercept = 0.08) +
xlim(0,0.2)
agg_BDD <- data.frame(recidivism = demmeans, bac1 = seq(0.01,1, by = 0.001))
ggplot(BDD, aes(bac1, recidivism)) +
geom_point(aes(x = bac1, y = recidivism), data = BDD) +
ggplot(BDD, aes(bac1, recidivism)) +
geom_point(aes(x = bac1, y = recidivism), data = BDD)
ggplot(BDD, aes(bac1, recidivism))
ggplot(BDD, aes(bac1, recidivism)) +
geom_point(aes(x = bac1, y = recidivism), data = agg_BDD) +
stat_smooth(aes(bac1, recidivism, group = gg_group), method = "lm") +
geom_vline(xintercept = 0.08) +
xlim(0,0.2)
demmeans <- split(BDD$recidivism, cut(BDD$bac1, 1000)) %>%
lapply(mean) %>%
unlist()
agg_BDD <- data.frame(recidivism = demmeans, bac1 = seq(0.01,1, by = 0.01))
# Plotting
BDD <- BDD %>%
mutate(gg_group = case_when(bac1 > 0.08 ~ 1, TRUE ~ 0))
ggplot(BDD, aes(bac1, recidivism)) +
geom_point(aes(x = bac1, y = recidivism), data = agg_BDD) +
stat_smooth(aes(bac1, recidivism, group = gg_group), method = "lm") +
geom_vline(xintercept = 0.08) +
xlim(0,0.2)
agg_BDD <- data.frame(recidivism = demmeans, bac1 = seq(0.01,1, by = 0.005))
# Plotting
BDD <- BDD %>%
mutate(gg_group = case_when(bac1 > 0.08 ~ 1, TRUE ~ 0))
agg_BDD <- data.frame(recidivism = demmeans, bac1 = seq(0.01,1, by = 0.01))
agg_BDD <- data.frame(recidivism = demmeans, bac1 = seq(0.01,1, by = 0.001))
agg_BDD <- data.frame(recidivism = demmeans, bac1 = bac1))
agg_BDD <- data.frame(recidivism = demmeans, bac1 = bac1)
agg_BDD <- data.frame(recidivism = demmeans, bac1 = BDD$bac1)
demmeans <- split(BDD$recidivism, cut(BDD$bac1, length(BDD$bac1))) %>%
lapply(mean) %>%
unlist()
agg_BDD <- data.frame(recidivism = demmeans, bac1 = BDD$bac1)
# Plotting
BDD <- BDD %>%
mutate(gg_group = case_when(bac1 > 0.08 ~ 1, TRUE ~ 0))
ggplot(BDD, aes(bac1, recidivism)) +
geom_point(aes(x = bac1, y = recidivism), data = agg_BDD) +
stat_smooth(aes(bac1, recidivism, group = gg_group), method = "lm") +
geom_vline(xintercept = 0.08) +
xlim(0,0.2)
# Aggregating the data
categories <- BDD$bac1
demmeans <- split(BDD$Male, cut(BDD$bac1, length(BDD$bac1))) %>%
lapply(mean) %>%
unlist()
agg_BDD <- data.frame(Male = demmeans, bac1 = BDD$bac1)
# Aggregating the data
categories <- BDD$bac1
demmeans <- split(BDD$Male, cut(BDD$bac1, length(BDD$bac1))) %>%
lapply(mean) %>%
unlist()
demmeans <- split(BDD$male, cut(BDD$bac1, length(BDD$bac1))) %>%
lapply(mean) %>%
unlist()
agg_BDD <- data.frame(male = demmeans, bac1 = BDD$bac1)
# Plotting
BDD <- BDD %>%
mutate(gg_group = case_when(bac1 > 0.08 ~ 1, TRUE ~ 0))
# Plotting
BDD <- BDD %>%
mutate(gg_group = case_when(bac1 > 0.08 ~ 1, TRUE ~ 0))
ggplot(BDD, aes(bac1, male)) +
geom_point(aes(x = bac1, y = male), data = agg_BDD) +
stat_smooth(aes(bac1, male, group = gg_group), method = "lm") +
geom_vline(xintercept = 0.08) +
xlim(0,0.2)
ggplot(BDD, aes(bac1, male)) +
geom_point(aes(x = bac1, y = male), data = BDD) +
stat_smooth(aes(bac1, male, group = gg_group), method = "lm") +
geom_vline(xintercept = 0.08) +
xlim(0,0.2)
rdplot(y = BDD$male, x = BDD$bac1, c = 0.08)
RDestimate(BDD$male ~ BDD$bac1)
RDestimate(male ~ bac1, data = BDD, cutpoint = 0.08)
reg_p <- RDestimate(male ~ bac1, data = BDD, cutpoint = 0.08)
plot.RD(reg_p)
reg_p <- RDestimate(male ~ bac1, data = BDD, cutpoint = 0.08, bw = c(0.03, 0.13))
reg_p
reg_p <- RDestimate(male ~ bac1 + dbac1 + bac1*dbac1, data = BDD, cutpoint = 0.08, bw = c(0.03, 0.13))
reg_p
reg_p <- RDestimate(male ~ bac1, data = BDD, cutpoint = 0.08, bw = c(0.03, 0.13))
plot.RD(reg_p)
library(rdd)
plot.RD(reg_p)
plot.RD
rdd::plot.RD
plot(reg_p)
